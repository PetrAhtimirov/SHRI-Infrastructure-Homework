name: Manual release
run-name: ${{ github.actor }} created a manual release ${{ github.run_number }}
on: [workflow_dispatch]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install modules
        run: npm ci
      - name: Run ESLint
        run: npm run lint
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: npm ci
      - run: npm test
  create-release-branch:
    runs-on: ubuntu-latest
    needs: [ lint, unit-tests ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Create and push release branch
        run: |
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}
  create-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: [ create-release-branch ]
    steps:
      - uses: actions/checkout@v3
      - name: Docker auth
        run: docker login --username oauth --password ${{ secrets.YANDEX_ACCESS_TOKEN }} cr.yandex
      - name: Docker create images
        run: |
          docker build -t ${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }} .
          docker build -t ${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}_latest .
      - name: Docker push images
        run: |
          docker push ${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}
          docker push ${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}_latest
  create-tag:
    runs-on: ubuntu-latest
    needs: [ create-and-push-docker-image ]
    steps:
      - uses: actions/checkout@v3
      - name: Create tag
        run: |
          git tag v${{ github.run_number }} main
          git push origin v${{ github.run_number }}
  create-release-issue:
    runs-on: ubuntu-latest
    needs: [ create-tag ]
    steps:
      - uses: actions/checkout@v3
      - name: Get commit history
        id: commits
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "v${{ github.run_number }}" | head -n 1)
          echo "previous_tag=$PREV_TAG" >> $GITHUB_ENV
          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:'* %s' --abbrev-commit)
          echo "commits=$COMMITS" >> $GITHUB_ENV
      - name: Create release issue
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO: ${{ github.repository }}
          VERSION: ${{ github.run_number }}
          PREVIOUS_TAG: ${{ env.previous_tag }}
          ACTOR: ${{ github.actor }}
          DATE: ${{ steps.commits.outputs.date }}
          COMMITS: ${{ env.commits }}
          DOCKER_IMAGE_URL: ${{ secrets.YANDEX_REGISTRY_ID }}/app:${{ github.run_number }}
        run: |
          ISSUE_TITLE="Release $VERSION"
          ISSUE_BODY=$(cat <<EOF
          **Release Information**
        
          - **Date:** $DATE
          - **Author:** $ACTOR
          - **Version:** $VERSION
          - **Docker Image:** $DOCKER_IMAGE_URL
        
          **Commits since last release:**
          $COMMITS
          EOF
          )
          ISSUE_BODY_ESCAPED=$(echo "$ISSUE_BODY" | jq -R .)
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"title\":
              \"$ISSUE_TITLE\", \"body\": $ISSUE_BODY_ESCAPED}" \
            https://api.github.com/repos/$REPO/issues